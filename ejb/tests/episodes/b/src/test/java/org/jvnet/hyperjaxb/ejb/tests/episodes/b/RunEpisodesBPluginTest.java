package org.jvnet.hyperjaxb.ejb.tests.episodes.b;

import static com.sun.tools.xjc.Language.XMLSCHEMA;
import static java.lang.String.format;
import static org.apache.maven.artifact.Artifact.SCOPE_SYSTEM;

import java.util.ArrayList;

import org.apache.maven.model.Dependency;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.jvnet.higherjaxb.mojo.testing.SLF4JLogger;
import org.jvnet.hyperjaxb.mojo.HyperjaxbMojo;
import org.jvnet.hyperjaxb.mojo.ejb.testing.AbstractHyperMojoTest;

/**
 * Run HyperJAXB Mojo to generate Episode B entities.
 */
@Order(1)
public class RunEpisodesBPluginTest extends AbstractHyperMojoTest
{
	@Test
	public void testExecute() throws Exception
	{
        // An "META-INF/sun-jaxb.episode" file is generated by the XJC (XML
        // Schema to Java) compiler. It is a schema bindings that associates
        // schema types with existing classes. It is useful when you have one
        // XML schema that is imported by other schemas, as it prevents the
        // model from being regenerated. XJC will scan JARs for '*.episode
        // files', then use them as binding files automatically.
        final Dependency episode = new Dependency();
        episode.setGroupId("org.patrodyne.jvnet");
		episode.setArtifactId("hisrc-hyperjaxb-ejb-tests-episodes-a");
        episode.setVersion(getProjectVersion());
        episode.setSystemPath(format("../a/target/%s-%s.jar", episode.getArtifactId(), episode.getVersion()));
        episode.setScope(SCOPE_SYSTEM);
        
		//
		// MOJO Execution
		//
		// HyperjaxbMojo auto-includes:
		//   hisrc-hyperjaxb-ejb-plugin
		//     hisrc-hyperjaxb-annox-plugin
		//     hisrc-basicjaxb-plugins
		//
		
		HyperjaxbMojo mojo = new HyperjaxbMojo();
		mojo.setLog(new SLF4JLogger(getLogger()));

		mojo.getRemoteRepos().add(REMOTE_REPOSITORY);
		mojo.setRepoSession(REPOSITORY_SYSTEM_SESSION);
		mojo.setRepoSystem(repositorySystem);
		
		mojo.setProject(createMavenProject());
		mojo.setSchemaLanguage(XMLSCHEMA.name());
		mojo.setSchemaDirectory(fullpath("src/main/resources"));
		mojo.setSchemaIncludes(new String[] { "*.xsd" });
		mojo.setBindingIncludes(new String[] { "*.xjb" });
		mojo.setGenerateDirectory(fullpath("target/generated-sources/xjc")); 
		mojo.setVerbose(true);
		mojo.setDebug(true);
		mojo.setWriteCode(true);
		mojo.setRemoveOldOutput(true);
		mojo.setForceRegenerate(true);
		mojo.setNoFileHeader(true);
		mojo.setExtension(true);
		mojo.setArgs(new ArrayList<>());
		
		mojo.setStrict(false);
		mojo.setCatalog(fullpath("src/main/resources/catalog.xml"));
		mojo.setEpisodes(new Dependency[] { episode });

		mojo.setVariant(getVariant());
		mojo.setRoundtripTestClassName(getRoundtripTestClassName());
		if ( mojo.getRoundtripTestClassName() != null )
			mojo.setValidateXml(false);
		
		mojo.execute();
	}
}
